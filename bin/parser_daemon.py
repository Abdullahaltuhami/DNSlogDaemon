#/usr/bin/env python2
import sys
import traceback
import time
import re
import MySQLdb
from daemon import Daemon
from datetime import datetime
import os
import io
import glob


class parser_algorithm(object):
    def run(self):
        try:
            if os.path.exists('/home/rwx/Desktop/parsing2DB/clean/'):
                # Search Inside clean folder
                path_to_file = glob.glob('/home/rwx/Desktop/parsing2DB/clean/dns*')
                path_to_file.sort(key=os.path.getmtime)
                print(path_to_file[0])
            else:
                # Exit parser
                print('There is nothing to parse')
                sys.exit(0)
        except:
            print("Exception: ")
            print('-'*60)
            traceback.print_exc(file=sys.stdout)
            print('-'*60)

        # Search/ Parsing Directory
        # Connection Object
        db = MySQLdb.connect(
            host='localhost',  user='root', passwd='rootserver', db='OGC')
        # Handling Logs generated by the parser
        start_time = time.time()
        commit_counter = 0
        commit_bulk_count = 0
        # ALL queries will be executed witha cursor - cursor object
        cursor = db.cursor()
        # Disable autocommit code mode by siableling
        cursor.execute('''SET autocommit=0;''')
        try:
            with open(path_to_file[0], 'r') as f:
                try:
                    for line in f.xreadlines():
                        # Clean the lines
                        clean_line = re.split(r'[;,\s]\s*', line)
                        if len(clean_line) <= 15:
                            pass
                        else:
                            try:
                                date_time = clean_line[0] + ' ' + \
                                    clean_line[1] + ' ' + clean_line[2]
                                clean_datetime = datetime.strptime(
                                    date_time, '%m/%d/%Y %I:%M:%S %p')
                                context = clean_line[4]
                            except:
                                print(len(clean_line))
                                print(clean_line)
                                # pass
                            # Case One when line is 19 strings long
                            if len(clean_line) == 31:
                                ex = ''
                                for items in clean_line:
                                    ex = ex + ' ' + items
                                cursor.execute('''INSERT INTO dnslog(date_time,context,exception)VALUES(%s,%s,%s)''',
                                               (clean_datetime, context, ex))
                                commit_counter += 1
                            elif len(clean_line) == 23:
                                UDP_TCP = clean_line[11]
                                snd_rcv = clean_line[12]
                                IP = clean_line[13]
                                r_q = clean_line[15] + '-' + clean_line[16]
                                opcode = clean_line[
                                    17] + ' ' + clean_line[18] + ' ' + clean_line[19]
                                Response_code = clean_line[20]
                                opcode = opcode.replace(
                                    '[', ' ').replace(']', ' ')
                                domain = clean_line[21].replace(
                                    '(', '.').replace(')', '')
                                cursor.execute('''INSERT INTO dnslog(date_time,context,protocol,direction,ip,r_q,opcode,response_code,domain)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)''',
                                               (clean_datetime, context, UDP_TCP, snd_rcv, IP, r_q, opcode, Response_code, domain))
                                commit_counter += 1
                            else:
                                UDP_TCP = clean_line[6]
                                snd_rcv = clean_line[7]
                                IP = clean_line[8]
                                r_q = clean_line[10]
                                # ---------------------
                                if len(clean_line) == 22:
                                    r_q = ' ' + clean_line[11]
                                    opcode = clean_line[
                                        12] + ' ' + clean_line[13] + ' ' + clean_line[14] + ' ' + clean_line[15]
                                    opcode = opcode.replace(
                                        '[', ' ').replace(']', ' ')
                                    Response_code = clean_line[16]
                                    domain = clean_line[17] + ' ' + clean_line[18] + ' ' + clean_line[
                                        19] + ' ' + clean_line[20] + ' ' + clean_line[21].replace('(', '.').replace(')', '')
                                    cursor.execute('''INSERT INTO dnslog(date_time,context,protocol,direction,ip,r_q,opcode,response_code,domain)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)''',
                                                   (clean_datetime, context, UDP_TCP, snd_rcv, IP, r_q, opcode, Response_code, domain))
                                    commit_counter += 1
                                elif len(clean_line) == 21:
                                    r_q = ' ' + clean_line[11]
                                    opcode = clean_line[
                                        12] + ' ' + clean_line[13] + ' ' + clean_line[14]
                                    opcode = opcode.replace(
                                        '[', ' ').replace(']', ' ')
                                    Response_code = clean_line[15]
                                    domain = clean_line[16] + ' ' + clean_line[17] + ' ' + clean_line[
                                        18] + ' ' + clean_line[19].replace('(', '.').replace(')', '')
                                    cursor.execute('''INSERT INTO dnslog(date_time,context,protocol,direction,ip,r_q,opcode,response_code,domain)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)''',
                                                   (clean_datetime, context, UDP_TCP, snd_rcv, IP, r_q, opcode, Response_code, domain))
                                    commit_counter += 1
                                elif len(clean_line) == 20:
                                    opcode = clean_line[11]
                                    opcode = opcode + ' ' + clean_line[12]
                                    opcode = opcode + ' ' + clean_line[13]
                                    opcode = opcode.replace(
                                        '[', ' ').replace(']', ' ')
                                    Response_code = clean_line[14]
                                    domain = clean_line[15] + ' ' + clean_line[16] + ' ' + clean_line[
                                        17] + ' ' + clean_line[18].replace('(', '.').replace(')', '')
                                    cursor.execute('''INSERT INTO dnslog(date_time,context,protocol,direction,ip,r_q,opcode,response_code,domain)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)''',
                                                   (clean_datetime, context, UDP_TCP, snd_rcv, IP, r_q, opcode, Response_code, domain))
                                    commit_counter += 1
                                elif len(clean_line) == 19:
                                    r_q = r_q + '-' + clean_line[11]
                                    opcode = clean_line[12]
                                    opcode = opcode + ' ' + clean_line[13]
                                    opcode = opcode + '' + \
                                        clean_line[14] + ' ' + clean_line[15]
                                    opcode = opcode.replace(
                                        '[', ' ').replace(']', ' ')
                                    Response_code = clean_line[16]
                                    domain = clean_line[17].replace(
                                        '(', '.').replace(')', '')
                                    # Insert into table
                                    cursor.execute('''INSERT INTO dnslog(date_time,context,protocol,direction,ip,r_q,opcode,response_code,domain)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)''',
                                                   (clean_datetime, context, UDP_TCP, snd_rcv, IP, r_q, opcode, Response_code, domain))
                                    commit_counter += 1
                                elif len(clean_line) == 18:
                                    opcode = clean_line[12]
                                    opcode = opcode + ' ' + clean_line[13]
                                    opcode = opcode + '' + clean_line[14]
                                    opcode = opcode.replace(
                                        '[', ' ').replace(']', ' ')
                                    Response_code = clean_line[15]
                                    domain = clean_line[16].replace(
                                        '(', '.').replace(')', '').replace('_', '-')
                                    cursor.execute('''INSERT INTO dnslog(date_time,context,protocol,direction,ip,r_q,opcode,response_code,domain)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)''',
                                                   (clean_datetime, context, UDP_TCP, snd_rcv, IP, r_q, opcode, Response_code, domain))
                                    commit_counter += 1
                                elif len(clean_line) == 17:
                                    opcode = clean_line[11]
                                    opcode = opcode + ' ' + clean_line[12]
                                    opcode = opcode + '' + clean_line[13]
                                    opcode = opcode.replace(
                                        '[', ' ').replace(']', ' ')
                                    Response_code = clean_line[14]
                                    domain = clean_line[15].replace(
                                        '(', '.').replace(')', '').replace('_', '-')
                                    # Insert into table
                                    cursor.execute('''INSERT INTO dnslog(date_time,context,protocol,direction,ip,r_q,opcode,response_code,domain)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)''',
                                                   (clean_datetime, context, UDP_TCP, snd_rcv, IP, r_q, opcode, Response_code, domain))
                                    commit_counter += 1
                                elif len(clean_line) == 16:
                                    opcode = clean_line[11]
                                    opcode = opcode + ' ' + clean_line[12]
                                    opcode = opcode.replace(
                                        '[', '').replace(']', '')
                                    Response_code = clean_line[13]
                                    domain = clean_line[14].replace(
                                        '(', '.').replace(')', '').replace('_', '-')
                                    # Insert into table
                                    cursor.execute('''INSERT INTO dnslog(date_time,context,protocol,direction,ip,r_q,opcode,response_code,domain)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)''',
                                                   (clean_datetime, context, UDP_TCP, snd_rcv, IP, r_q, opcode, Response_code, domain))
                                    commit_counter += 1
                                else:
                                    print(
                                        'Parser algorithm need to be modified / New len(clean_line) found)')
                                    # What parser Algorithm didn't catch
                                    print(clean_line)
                                    print(len(clean_line))

                                # Counter to be deleted
                                if commit_counter % 100000 == 0:
                                    db.commit()
                                    try:
                                        now = datetime.now().strftime('%Y%m%d-%H%M%S')
                                        filename_log = 'parserDaemon_logs.txt'
                                        if os.path.exists('/home/commit_log'):
                                            with io.FileIO('/home/commit_log/commit.txt','a') as file:
                                                file.write('commit made :  %s' % commit_bulk_count)
                                                commit_bulk_count +=1
                                                file.write('time to commit : %s -- seconds' % (time.time() - start_time))
                                                file.writelines('\r\n')

                                        else:
                                            os.makedirs('/home/commit_log',0755)
                                            os.system('sudo touch commit.txt')
                                            with io.FileIO('/home/commit_log/commit.txt','a') as file:
                                                file.write('commit made :  %s' % commit_bulk_count)
                                                commit_bulk_count +=1
                                                file.write('time to commit : %s -- seconds' % (time.time() - start_time))

                                    except Exception as e:
                                        print(e)
                                    finally:
                                        pass
                except Exception as e:
                    traceback.print_exc(file=sys.stdout)
                    pass
                finally:
                    db.commit()
                    f.close()
                    db.close()
                    os.system('sudo rm -rf {0}'.format(first_to_parse))
        except Exception as e:
            print(e)
            pass


class MyDaemon(Daemon):

    def run(self):
        daemon_parser = parser_algorithm()
        daemon_parser.run()


if __name__ == '__main__':
    parser_daemon = MyDaemon('/tmp/OGC-DNS-daemon.pid')
    if len(sys.argv) == 2:
        if 'start' == sys.argv[1]:
            # Use .run instead of .start to debug your code
            parser_daemon.run()
        elif 'stop' == sys.argv[1]:
            parser_daemon.stop()
        elif 'restart' == sys.argv[1]:
            parser_daemon.restart()
        else:
            print("Unknown command")
            sys.exit(2)
        sys.exit(0)
    else:
        print("Usage: %s start|stop|restart " % sys.argv[0])
        sys.exit(2)
