#/usr/bin/env python2
import sys
import traceback
import time
import re
import MySQLdb
from daemon import Daemon
from datetime import datetime


class parser_algorithm(object):

    def run(self):
        # Connection Object
        db = MySQLdb.connect(
            host='localhost',  user='root', passwd='', db='OGC')
        # Handling Logs generated by the parser
        now = datetime.now().strftime('%Y%m%d-%H%M%S')
        commit_counter = 0
        filename_log = 'parser_logs' + '-' + now + '.txt'
        # ALL queries will be executed witha cursor - cursor object
        cursor = db.cursor()
        # Disable autocommit code mode by siableling
        cursor.execute('''SET autocommit=0;''')
        try:
            with open('../DNSdebugLog2Clean', 'r') as f:
                try:
                    for line in f.xreadlines():
                        # Clean the lines
                        clean_line = re.split(r'[;,\s]\s*', line)
                        try:
                            date_time = clean_line[0] + ' ' + \
                                clean_line[1] + ' ' + clean_line[2]
                            clean_datetime = datetime.strptime(
                                date_time, '%m/%d/%Y %I:%M:%S %p')
                            context = clean_line[4]
                        except:
                            print('error happened here')
                            print(len(clean_line))
                            print(clean_line)
                            pass
                        # Case One when line is 19 strings long
                        if len(clean_line) == 31:
                            ex = ''
                            for items in clean_line:
                                ex = ex + ' ' + items
                            cursor.execute('''INSERT INTO dnslog(date_time,context,exception)VALUES(%s,%s,%s)''',
                                           (clean_datetime, context, ex))
                            commit_counter+=1
                        elif len(clean_line) == 15:
                            pass
                        else:
                            UDP_TCP = clean_line[6]
                            snd_rcv = clean_line[7]
                            IP = clean_line[8]
                            r_q = clean_line[10]

                            if len(clean_line) == 19:
                                r_q = r_q + '-' + clean_line[11]
                                opcode = clean_line[12]
                                opcode = opcode + ' ' + clean_line[13]
                                opcode = opcode + '' + \
                                    clean_line[14] + ' ' + clean_line[15]
                                opcode = opcode.replace(
                                    '[', '').replace(']', '')
                                Response_code = clean_line[16]
                                domain = clean_line[17].replace(
                                    '(', '.').replace(')', '')
                                # Insert into table
                                cursor.execute('''INSERT INTO dnslog(date_time,context,protocol,direction,ip,r_q,opcode,response_code,domain)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)''',
                                               (clean_datetime, context, UDP_TCP, snd_rcv, IP, r_q, opcode, Response_code, domain))
                                commit_counter+=1
                            elif len(clean_line) == 18:
                                opcode = clean_line[12]
                                opcode = opcode + ' ' + clean_line[13]
                                opcode = opcode + '' + clean_line[14]
                                opcode = opcode.replace(
                                    '[', '').replace(']', '')
                                Response_code = clean_line[15]
                                domain = clean_line[16].replace(
                                    '(', '.').replace(')', '').replace('_', '-')
                                cursor.execute('''INSERT INTO dnslog(date_time,context,protocol,direction,ip,r_q,opcode,response_code,domain)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)''',
                                               (clean_datetime, context, UDP_TCP, snd_rcv, IP, r_q, opcode, Response_code, domain))
                                commit_counter+=1
                            elif len(clean_line) == 17:
                                opcode = clean_line[11]
                                opcode = opcode + ' ' + clean_line[12]
                                opcode = opcode + '' + clean_line[13]
                                opcode = opcode.replace(
                                    '[', '').replace(']', '')
                                Response_code = clean_line[14]
                                domain = clean_line[15].replace(
                                    '(', '.').replace(')', '').replace('_', '-')
                                # Insert into table
                                cursor.execute('''INSERT INTO dnslog(date_time,context,protocol,direction,ip,r_q,opcode,response_code,domain)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)''',
                                               (clean_datetime, context, UDP_TCP, snd_rcv, IP, r_q, opcode, Response_code, domain))
                                commit_counter+=1
                            elif len(clean_line) == 16:
                                opcode = clean_line[11]
                                opcode = opcode + ' ' + clean_line[12]
                                opcode = opcode.replace(
                                    '[', '').replace(']', '')
                                Response_code = clean_line[13]
                                domain = clean_line[14].replace(
                                    '(', '.').replace(')', '').replace('_', '-')
                                # Insert into table
                                cursor.execute('''INSERT INTO dnslog(date_time,context,protocol,direction,ip,r_q,opcode,response_code,domain)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)''',
                                               (clean_datetime, context, UDP_TCP, snd_rcv, IP, r_q, opcode, Response_code, domain))
                                commit_counter+=1
                            else:
                                with open(filename_log, 'a+') as f:
                                    f.write(
                                        'Parser Algorithm in bin/parser_daemon couldnt parse this line. Line isn\'t in database')
                                    f.write(len(clean_line))
                                    f.writelines(clean_line)

                            # Counter
                            if commit_counter % 100000 == 0:
                                db.commit()
                                print('execute after 100000')
                except Exception as e:
                    print('rollback got executed')
                    #db.rollback()
                    with open(filename_log, 'a+') as f:
                        f.write('Parser Algorithm in bin/parser_daemon.py couldnt parse this line (Line isn\'t in database)')
                        f.write(len(clean_line))
                        f.writelines(clean_line)
                    traceback.print_exc(file=sys.stdout)
                    pass
                finally:
                    print('Commit got executed')
                    db.commit()
                    f.close()
                    db.close()
        except Exception as e:
            print(e)
            pass


class MyDaemon(Daemon):

    def run(self):
        daemon_parser = parser_algorithm()
        daemon_parser.run()


if __name__ == '__main__':
    parser_daemon = MyDaemon('/tmp/OGC-DNS-daemon.pid')
    if len(sys.argv) == 2:
        if 'start' == sys.argv[1]:
            # Use .run instead of .start to debug your code
            parser_daemon.run()
        elif 'stop' == sys.argv[1]:
            parser_daemon.stop()
        elif 'restart' == sys.argv[1]:
            parser_daemon.restart()
        else:
            print("Unknown command")
            sys.exit(2)
        sys.exit(0)
    else:
        print("Usage: %s start|stop|restart " % sys.argv[0])
        sys.exit(2)
